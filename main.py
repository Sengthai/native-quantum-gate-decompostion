import os
import csv
from math import pi, ceil
from tqdm import tqdm

from qiskit import QuantumCircuit, transpile
os.system('cls' if os.name == 'nt' else 'clear')

dir_name = "pattern2"
ref_dir_path = "./" + dir_name

def writeEval(rows):
    with open(dir_name+'_eval.csv', 'w', newline='') as file:
        writer = csv.writer(file)

        header = [  'circuit', 'qubit',
                    'ori_gate', 'ori_depth',
                    'ibm_gate', 'ibm_depth', 
                    'ionq_gate', 'ionq_depth',
                    'riggit_gate', 'riggit_depth',
                    'google_gate', 'google_depth']     
        writer.writerow(header)
        for row in tqdm(rows):
            writer.writerow(row)

rows = []

for qasm in tqdm(os.listdir(ref_dir_path)):

    # preven .DS_store or files that auto generated by OS
    if qasm.startswith('.'):
        continue
    
    qasm_path = os.path.join(ref_dir_path, qasm)
    
    name = qasm.replace(".qasm", "")
    qc = QuantumCircuit.from_qasm_file(qasm_path)
    
    ibm_basis = ['rx', 'rz', 'rzx'] # rzx is cross-resonance gate
    ibm_qc = transpile(qc, basis_gates=ibm_basis, optimization_level=0)

    ion_basis = ['rx', 'ry', 'rz', 'rxx'] # rxx is xx(x) gates 
    ion_qc = transpile(qc, basis_gates=ion_basis, optimization_level=0)

    rigetti_basis = ['rx', 'rz', 'cz']
    rigetti_qc = transpile(qc, basis_gates=rigetti_basis, optimization_level=0)

    google_basis = ['rx', 'ry', 'rz', 'cz']
    google_qc = transpile(qc, basis_gates=google_basis, optimization_level=0)

    rows.append([
        name, qc.num_qubits,
        qc.size(), qc.depth(),
        ibm_qc.size(), ibm_qc.depth(),
        ion_qc.size(), ion_qc.depth(),
        rigetti_qc.size(), rigetti_qc.depth(),
        google_qc.size(), google_qc.depth(),
    ])

writeEval(rows)

# print(ibm_qc)
# print(qc.decompose())
# print(decom_qc)
# print("IBM global phase", ceil(ibm_qc.global_phase * 8 / pi))
# print("ION global phase", ceil(ion_qc.global_phase * 8 / pi))
# print("RIG global phase", ceil(rigetti_qc.global_phase * 8 / pi))
# print("GOG global phase", ceil(google_qc.global_phase * 8 / pi))
# print()
# print("Original Circuit : ", qc.size())
# print()
# print("IBM Circuit : ", ibm_qc.size())
# print("IBM depth : ", ibm_qc.depth())
# print("ION Circuit : ", ion_qc.size())
# print("ION depth : ", ion_qc.depth())
# print("Rigetti Circuit : ", rigetti_qc.size())
# print("Rigetti depth : ", rigetti_qc.depth())
# print("Google Circuit : ", google_qc.size())
# print("Google depth : ", google_qc.depth())

