import os
import csv
from tqdm import tqdm
import numpy as np
from multiprocessing import Pool, cpu_count
import time

from qiskit import QuantumCircuit, transpile, Aer
os.system('cls' if os.name == 'nt' else 'clear')

DEBUG = 0

dir_name = "benchmarks"


ref_dir_path = "./" + dir_name

def writeEval(rows):
    with open(dir_name+'_eval.csv', 'w', newline='') as file:
        writer = csv.writer(file)

        header = ['cir','qubit', 'origin_gate', 'ibm_gate', 
                    'ionq_gate','riggit_gate','google_gate',
                    'ori_depth','ibm_depth', 'ionq_depth',
                     'riggit_depth','google_depth',
                     'ibm_gates', 'ionq_gate', 'riggit_gates', 'google_gates'
                     ] 
        writer.writerow(header)
        for row in tqdm(rows):
            writer.writerow(row)



# for qasm in tqdm(os.listdir(ref_dir_path)):

def evaluate_file(qasm):
    # # preven .DS_store or files that auto generated by OS
    # if qasm.startswith('.'):
    #     continue
    
    qasm_path = os.path.join(ref_dir_path, qasm)
    name = qasm.replace(".qasm", "")

    qc = QuantumCircuit.from_qasm_file(qasm_path)

    num_of_machine = 4

    ibm_basis       = ['sx', 'rz', 'rzx'] # rzx is cross-resonance gate
    rigetti_basis   = ['sx', 'rz', 'cz']
    ion_basis       = ['r',  'rz', 'rxx'] # rxx is xx(x) gates
    google_basis    = ['r',  'rz', 'cz', 'iswap']

    machines = {"ibm": ibm_basis, 
                "ion": ion_basis,
                "rigetti": rigetti_basis, 
                "google": google_basis}

    m_size, m_depth, m_gates = [], [], []

    if DEBUG == 1:
        print("Original circuit")
        print(qc)

    for m,basis in machines.items():

        temp_qc = transpile(qc, basis_gates=basis, optimization_level=0)
        gate_cxt = ""

        for gate, c in  dict(sorted(temp_qc.count_ops().items())).items():
            if gate == "r":
                gate = "Rxy"
            if gate == "measure" or gate == "barrier":
                continue
            gate_cxt += gate.capitalize() + ": " + str(c)  + ", "

        if DEBUG == 1:
            print("Machine: " , m , " -- Gate: " , temp_qc.size())
            print(temp_qc)

        m_depth.append(temp_qc.depth())
        m_size.append(temp_qc.size())
        m_gates.append(gate_cxt[:-2])
        

    print("-- ", name , ": ", qc.size(), " gates")

    # Append name, number of qubits, original size, [each of machines native gate], 
    # original circuit depth, [each of machines circuit depth]
    return [name, qc.num_qubits, qc.size()] + m_size + [qc.depth()] + m_depth + m_gates

if __name__ == "__main__":
    start_time = time.time()

    rows = []
    paths_list = [ p for p in os.listdir(ref_dir_path) if not p.startswith('.')]

    if DEBUG==1:
        for i in paths_list:
            evaluate_file(i)
            break
    else:
        print("CPUs work with : ", cpu_count() - 1)
        pool = Pool(processes=cpu_count() - 1)
        rows = pool.map(evaluate_file, paths_list)
        pool.close()
        writeEval(rows)
    print("DONE with --- %s seconds ---" % (time.time() - start_time))



