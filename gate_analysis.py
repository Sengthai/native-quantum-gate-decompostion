from itertools import count
import os
import csv
from math import pi, ceil
from tqdm import tqdm

from qiskit import QuantumCircuit, transpile
os.system('cls' if os.name == 'nt' else 'clear')

ref_dir_path = "./pattern3"

for qasm in (os.listdir(ref_dir_path)):

    # preven .DS_store or files that auto generated by OS
    if qasm.startswith('.'):
        continue
    
    qasm_path = os.path.join(ref_dir_path, qasm)
    qc = QuantumCircuit.from_qasm_file(qasm_path)

    num = qc.size()
    body = ""
    for gate, c in qc.count_ops().items():
        body += ", " + gate + ": " + "{:.2f}".format(c / num *100) + "%"

    print(qasm.replace(".qasm", ""),  body)


# qasm_path = os.path.join(ref_dir_path, qasm)
# qc = QuantumCircuit.from_qasm_file("/Users/hengsengthai/Documents/06.Projects/Native-gate-detection/ngd/ref/4gt13_92.qasm")
# num = qc.size()
# body = ""
# for gate, c in qc.count_ops().items():
#     print(gate, c / num *100)
#     body += ", " + gate + ": " + "{:.2f}".format(c / num *100) + "%"
# print(body)
